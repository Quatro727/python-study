<오류의 종류>
프로그래밍 언어에는 크게 2가지 종류의 error가 있다.

-프로그램 실행 전에 발생하는 오류->구문 오류(Syntax error)
-프로그램 실행 중에 발생하는 오류->런타임 오류(Runtime error) 또는 예외(Exception)

1)구문 오류
보통 문법을 틀리는 경우 발생하는 오류이다. 프로그램이 실행조차 되지 않는다.
2)예외
프로그램이 일단 실행된 다음에 발생하는 오류이다.
이 오류도 문법처럼 코드를 수정하면 프로그램이 정상적으로 수행된다.

<기본 예외 처리>
예외를 해결하는 것을 예외 처리라고 한다. 크게 2가지가 있다.

-조건문으로 해결
-try 구문으로 해결

이때 구문 오류는 프로그램이 실행조차 되지 않으므로 예외 처리 방법으로는 해결이 불가능하다. 오로지 문법을 수정하는 수밖에 없다.

<try except 구문>
1)기본 형식:
try:
    예외가 발생할 가능성이 있는 코드
except:
    예외가 발생했을 때의 코드
(try_except_ex1.py)
2)pass 키워드
예외가 발생하면 일단 처리해야 하지만, 해당 코드가 딱히 중요한 부분이 아니면 일단 프로그램이 강제 종료되는 것을 막자는 목적으로 
except 구문에 아무 것도 적지 않고 try 구문을 사용한다. 이때 구문 내부에 아무 것도 적지 않으면 구문 오류가 발생하므로 pass 키워드를 
적어준다.
형식:
try:
    예외가 발생할 가능성이 있는 코드
except:
    pass
(try_except_ex2.py)

<try except else 구문>
try except 구문에 else 구문을 붙여 사용하면 예외가 발생하지 않았을 때 실행할 코드를 지정할 수 있다.
기본 형식은 다음과 같다.
try:
    예외가 발생할 수 있는 코드
except:
    예외가 발생한 경우 실행할 코드
else:
    예외가 발생하지 않았을 때 실행할 코드

try->예외 가능성이 있는 코드만 try 구문에 넣음
else->예외 가능성이 없는 코드를 else 구문에 넣음. try 구문이 무사히 실행되면 else 구문이 실행됨
(try_except_else_ex1.py)
<finally 구문>
예외 처리 구문에서 가장 마지막에 사용할 수 있는 구문
예외가 발생하든 발생하지 않든 무조건 실행할 때 사용한다.
기본 형식은 아래와 같다.
try:
    예외가 발생할 수 있는 코드
except:
    예외가 발생한 경우 실행할 코드
else:
    예외가 발생하지 않았을 때 실행할 코드
finally:
    무조건 실행하는 코드
1)try, except, else, finally 구문의 조합
예외 처리 구문을 짤 때의 규칙은 다음과 같다.
-try 구문의 단독 사용 불가. 반드시 except 구문이나 finally구문과 함께 써야 한다.
-else 구문은 반드시 except 구문 뒤에 작성되야 한다.

2)finally에 대한 오해
프로그램이 항상 켜져 있는 프로그램에서 finally 구문은은
파일 처리의 예시로 들자면 파일은 반드시 마지막에 닫아야 한다.
이때 중간에 예외가 발생하면 try 구문 중간에 튕겨 버리면 파일이 제대로 닫히지 않는 사고가 발생할 수 있다.
그래서 무조건 실행되는 구문인 finally 구문으로 파일을 닫는 동작을 실행시키면 된다.
(finally_ex1.py)
3)try 구문 내부에 return 키워드를 사용하는 경우
finally 구문은 반복문 또는 함수 내부에 있을 때 그 효과가 나온다.
return 키워드를 사용해 try 구문 중간에 함수를 빠져나와도 finally 구문은 반드시 실행된다.
(finally_ex2.py)
4)반복문과 함께 사용하는 경우
finally 구문은 무조건 실행된다. 따라서 반복문에서 break로 빠져나갈 때도 마찬가지로 실행된다.
(finally_ex3.py)
코드 실행 시 break 키워드로 try 구문 전체를 빠져나가도 finally 구문이 실행됨을 알 수 있다.
